

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Dec 23 22:01:27 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26  0000                     
    27                           ; Version 2.20
    28                           ; Generated 12/02/2020 GMT
    29                           ; 
    30                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4520 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     
    62                           	psect	idataCOMRAM
    63  007DA4                     __pidataCOMRAM:
    64                           	callstack 0
    65                           
    66                           ;initializer for _address
    67  007DA4  0103               	dw	259
    68  007DA6  0B31               	dw	2865
    69  007DA8  1032               	dw	4146
    70  007DAA  0C23               	dw	3107
    71  007DAC  6004               	dw	24580
    72  007DAE  C0BF               	dw	49343
    73  007DB0  10C6               	dw	4294
    74  007DB2  0317               	dw	791
    75  007DB4  0AF8               	dw	2808
    76  007DB6  0A19               	dw	2585
    77  007DB8  102A               	dw	4138
    78  007DBA  0CCB               	dw	3275
    79  007DBC  1388               	dw	5000
    80  007DBE  612D               	dw	24877
    81                           
    82                           ;initializer for _data
    83  007DC0  70                 	db	112
    84  007DC1  72                 	db	114
    85  007DC2  6F                 	db	111
    86  007DC3  74                 	db	116
    87  007DC4  65                 	db	101
    88  007DC5  75                 	db	117
    89  007DC6  73                 	db	115
    90  007DC7  2D                 	db	45
    91  007DC8  65                 	db	101
    92  007DC9  65                 	db	101
    93  007DCA  70                 	db	112
    94  007DCB  72                 	db	114
    95  007DCC  6F                 	db	111
    96  007DCD  6D                 	db	109
    97                           
    98                           ;initializer for _commands
    99  007DCE  38                 	db	56
   100  007DCF  0E                 	db	14
   101  007DD0  01                 	db	1
   102  007DD1  06                 	db	6
   103  007DD2  81                 	db	129
   104  007DD3  00                 	db	0
   105  0000                     _PORTEbits	set	3972
   106  0000                     _PORTD	set	3971
   107  0000                     _TRISE	set	3990
   108  0000                     _ADCON1	set	4033
   109  0000                     _TRISD	set	3989
   110  0000                     _SSPBUF	set	4041
   111  0000                     _SSPCON1	set	4038
   112  0000                     _SSPSTAT	set	4039
   113  0000                     _RA5	set	31749
   114  0000                     _BF	set	32312
   115  0000                     _TRISC5	set	31909
   116  0000                     _TRISC4	set	31908
   117  0000                     _TRISC3	set	31907
   118  0000                     _TRISA5	set	31893
   119                           
   120                           ; #config settings
   121                           
   122                           	psect	cinit
   123  007D7E                     __pcinit:
   124                           	callstack 0
   125  007D7E                     start_initialization:
   126                           	callstack 0
   127  007D7E                     __initialization:
   128                           	callstack 0
   129                           
   130                           ; Initialize objects allocated to COMRAM (48 bytes)
   131                           ; load TBLPTR registers with __pidataCOMRAM
   132  007D7E  0EA4               	movlw	low __pidataCOMRAM
   133  007D80  6EF6               	movwf	tblptrl,c
   134  007D82  0E7D               	movlw	high __pidataCOMRAM
   135  007D84  6EF7               	movwf	tblptrh,c
   136  007D86  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   137  007D88  6EF8               	movwf	tblptru,c
   138  007D8A  EE00  F001         	lfsr	0,__pdataCOMRAM
   139  007D8E  EE10 F030          	lfsr	1,48
   140  007D92                     copy_data0:
   141  007D92  0009               	tblrd		*+
   142  007D94  CFF5 FFEE          	movff	tablat,postinc0
   143  007D98  50E5               	movf	postdec1,w,c
   144  007D9A  50E1               	movf	fsr1l,w,c
   145  007D9C  E1FA               	bnz	copy_data0
   146  007D9E                     end_of_initialization:
   147                           	callstack 0
   148  007D9E                     __end_of__initialization:
   149                           	callstack 0
   150  007D9E  0100               	movlb	0
   151  007DA0  EF6F  F03F         	goto	_main	;jump to C main() function
   152                           
   153                           	psect	dataCOMRAM
   154  000001                     __pdataCOMRAM:
   155                           	callstack 0
   156  000001                     _address:
   157                           	callstack 0
   158  000001                     	ds	28
   159  00001D                     _data:
   160                           	callstack 0
   161  00001D                     	ds	14
   162  00002B                     _commands:
   163                           	callstack 0
   164  00002B                     	ds	6
   165                           
   166                           	psect	cstackCOMRAM
   167  000031                     __pcstackCOMRAM:
   168                           	callstack 0
   169  000031                     ?___wmul:
   170                           	callstack 0
   171  000031                     SPI_write@data:
   172                           	callstack 0
   173  000031                     SPI_read@dummy:
   174                           	callstack 0
   175  000031                     msdelay@itime:
   176                           	callstack 0
   177  000031                     ___wmul@multiplier:
   178                           	callstack 0
   179                           
   180                           ; 2 bytes @ 0x0
   181  000031                     	ds	1
   182  000032                     EEPROM_status@status:
   183                           	callstack 0
   184                           
   185                           ; 1 bytes @ 0x1
   186  000032                     	ds	1
   187  000033                     EEPROM_busy@busy:
   188                           	callstack 0
   189  000033                     msdelay@i:
   190                           	callstack 0
   191  000033                     ___wmul@multiplicand:
   192                           	callstack 0
   193                           
   194                           ; 2 bytes @ 0x2
   195  000033                     	ds	1
   196  000034                     EEPROM_write@address:
   197                           	callstack 0
   198  000034                     EEPROM_read@address:
   199                           	callstack 0
   200                           
   201                           ; 2 bytes @ 0x3
   202  000034                     	ds	1
   203  000035                     msdelay@j:
   204                           	callstack 0
   205  000035                     ___wmul@product:
   206                           	callstack 0
   207                           
   208                           ; 2 bytes @ 0x4
   209  000035                     	ds	1
   210  000036                     EEPROM_write@data:
   211                           	callstack 0
   212  000036                     EEPROM_read@data:
   213                           	callstack 0
   214                           
   215                           ; 1 bytes @ 0x5
   216  000036                     	ds	1
   217  000037                     lcdcmd@value:
   218                           	callstack 0
   219  000037                     lcddata@value:
   220                           	callstack 0
   221  000037                     delay@nMilliseconds:
   222                           	callstack 0
   223                           
   224                           ; 2 bytes @ 0x6
   225  000037                     	ds	2
   226  000039                     delay@nCycles:
   227                           	callstack 0
   228                           
   229                           ; 4 bytes @ 0x8
   230  000039                     	ds	4
   231  00003D                     main@i_179:
   232                           	callstack 0
   233                           
   234                           ; 2 bytes @ 0xC
   235  00003D                     	ds	2
   236  00003F                     main@j:
   237                           	callstack 0
   238                           
   239                           ; 2 bytes @ 0xE
   240  00003F                     	ds	2
   241  000041                     main@i:
   242                           	callstack 0
   243                           
   244                           ; 2 bytes @ 0x10
   245  000041                     	ds	2
   246                           
   247 ;;
   248 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   249 ;;
   250 ;; *************** function _main *****************
   251 ;; Defined at:
   252 ;;		line 84 in file "spi_read_write.c"
   253 ;; Parameters:    Size  Location     Type
   254 ;;		None
   255 ;; Auto vars:     Size  Location     Type
   256 ;;  j               2   14[COMRAM] int 
   257 ;;  i               2   12[COMRAM] int 
   258 ;;  i               2   16[COMRAM] int 
   259 ;; Return value:  Size  Location     Type
   260 ;;                  1    wreg      void 
   261 ;; Registers used:
   262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   263 ;; Tracked objects:
   264 ;;		On entry : 0/0
   265 ;;		On exit  : 0/0
   266 ;;		Unchanged: 0/0
   267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   268 ;;      Params:         0       0       0       0       0       0       0
   269 ;;      Locals:         6       0       0       0       0       0       0
   270 ;;      Temps:          0       0       0       0       0       0       0
   271 ;;      Totals:         6       0       0       0       0       0       0
   272 ;;Total ram usage:        6 bytes
   273 ;; Hardware stack levels required when called: 4
   274 ;; This function calls:
   275 ;;		_EEPROM_read
   276 ;;		_EEPROM_write
   277 ;;		_SPI_init
   278 ;;		_delay
   279 ;;		_lcdcmd
   280 ;;		_lcddata
   281 ;;		_msdelay
   282 ;; This function is called by:
   283 ;;		Startup code after reset
   284 ;; This function uses a non-reentrant model
   285 ;;
   286                           
   287                           	psect	text0
   288  007EDE                     __ptext0:
   289                           	callstack 0
   290  007EDE                     _main:
   291                           	callstack 27
   292  007EDE                     
   293                           ;spi_read_write.c: 86:     SPI_init();
   294  007EDE  EC64  F03E         	call	_SPI_init	;wreg free
   295  007EE2                     
   296                           ;spi_read_write.c: 87:     TRISD = 0x00;
   297  007EE2  0E00               	movlw	0
   298  007EE4  6E95               	movwf	149,c	;volatile
   299  007EE6                     
   300                           ;spi_read_write.c: 88:     ADCON1=0X0F;
   301  007EE6  0E0F               	movlw	15
   302  007EE8  6EC1               	movwf	193,c	;volatile
   303  007EEA                     
   304                           ;spi_read_write.c: 89:     TRISE=0X00;
   305  007EEA  0E00               	movlw	0
   306  007EEC  6E96               	movwf	150,c	;volatile
   307  007EEE                     
   308                           ;spi_read_write.c: 90:     msdelay(50);
   309  007EEE  0E00               	movlw	0
   310  007EF0  6E32               	movwf	(msdelay@itime+1)^0,c
   311  007EF2  0E32               	movlw	50
   312  007EF4  6E31               	movwf	msdelay@itime^0,c
   313  007EF6  EC47  F03F         	call	_msdelay	;wreg free
   314  007EFA                     
   315                           ;spi_read_write.c: 94:     for( int i = 0 ; i < 14 ; i++ )
   316  007EFA  0E00               	movlw	0
   317  007EFC  6E42               	movwf	(main@i+1)^0,c
   318  007EFE  0E00               	movlw	0
   319  007F00  6E41               	movwf	main@i^0,c
   320  007F02                     l1058:
   321                           
   322                           ;spi_read_write.c: 95:         EEPROM_write(address[i],data[i]);
   323  007F02  90D8               	bcf	status,0,c
   324  007F04  3441               	rlcf	main@i^0,w,c
   325  007F06  6ED9               	movwf	fsr2l,c
   326  007F08  3442               	rlcf	(main@i+1)^0,w,c
   327  007F0A  6EDA               	movwf	fsr2h,c
   328  007F0C  0E01               	movlw	low _address
   329  007F0E  26D9               	addwf	fsr2l,f,c
   330  007F10  0E00               	movlw	high _address
   331  007F12  22DA               	addwfc	fsr2h,f,c
   332  007F14  CFDE F034          	movff	postinc2,EEPROM_write@address
   333  007F18  CFDD F035          	movff	postdec2,EEPROM_write@address+1
   334  007F1C  0E1D               	movlw	low _data
   335  007F1E  2441               	addwf	main@i^0,w,c
   336  007F20  6ED9               	movwf	fsr2l,c
   337  007F22  0E00               	movlw	high _data
   338  007F24  2042               	addwfc	(main@i+1)^0,w,c
   339  007F26  6EDA               	movwf	fsr2h,c
   340  007F28  50DF               	movf	indf2,w,c
   341  007F2A  6E36               	movwf	EEPROM_write@data^0,c
   342  007F2C  EC05  F03F         	call	_EEPROM_write	;wreg free
   343  007F30  4A41               	infsnz	main@i^0,f,c
   344  007F32  2A42               	incf	(main@i+1)^0,f,c
   345  007F34  BE42               	btfsc	(main@i+1)^0,7,c
   346  007F36  EFA6  F03F         	goto	u161
   347  007F3A  5042               	movf	(main@i+1)^0,w,c
   348  007F3C  E109               	bnz	u160
   349  007F3E  0E0E               	movlw	14
   350  007F40  5C41               	subwf	main@i^0,w,c
   351  007F42  A0D8               	btfss	status,0,c
   352  007F44  EFA6  F03F         	goto	u161
   353  007F48  EFA8  F03F         	goto	u160
   354  007F4C                     u161:
   355  007F4C  EF81  F03F         	goto	l1058
   356  007F50                     u160:
   357  007F50                     
   358                           ;spi_read_write.c: 98:     for(int i=0;commands[i]!='\0';i++)
   359  007F50  0E00               	movlw	0
   360  007F52  6E3E               	movwf	(main@i_179+1)^0,c
   361  007F54  0E00               	movlw	0
   362  007F56  6E3D               	movwf	main@i_179^0,c
   363  007F58  EFBF  F03F         	goto	l1072
   364  007F5C                     l1066:
   365                           
   366                           ;spi_read_write.c: 99:     {;spi_read_write.c: 100:         lcdcmd(commands[i]);
   367  007F5C  0E2B               	movlw	low _commands
   368  007F5E  243D               	addwf	main@i_179^0,w,c
   369  007F60  6ED9               	movwf	fsr2l,c
   370  007F62  0E00               	movlw	high _commands
   371  007F64  203E               	addwfc	(main@i_179+1)^0,w,c
   372  007F66  6EDA               	movwf	fsr2h,c
   373  007F68  50DF               	movf	indf2,w,c
   374  007F6A  EC90  F03E         	call	_lcdcmd
   375  007F6E                     
   376                           ;spi_read_write.c: 101:         delay(100);
   377  007F6E  0E00               	movlw	0
   378  007F70  6E38               	movwf	(delay@nMilliseconds+1)^0,c
   379  007F72  0E64               	movlw	100
   380  007F74  6E37               	movwf	delay@nMilliseconds^0,c
   381  007F76  EC23  F03F         	call	_delay	;wreg free
   382  007F7A                     
   383                           ;spi_read_write.c: 102:     }
   384  007F7A  4A3D               	infsnz	main@i_179^0,f,c
   385  007F7C  2A3E               	incf	(main@i_179+1)^0,f,c
   386  007F7E                     l1072:
   387  007F7E  0E2B               	movlw	low _commands
   388  007F80  243D               	addwf	main@i_179^0,w,c
   389  007F82  6ED9               	movwf	fsr2l,c
   390  007F84  0E00               	movlw	high _commands
   391  007F86  203E               	addwfc	(main@i_179+1)^0,w,c
   392  007F88  6EDA               	movwf	fsr2h,c
   393  007F8A  50DF               	movf	indf2,w,c
   394  007F8C  A4D8               	btfss	status,2,c
   395  007F8E  EFCB  F03F         	goto	u171
   396  007F92  EFCD  F03F         	goto	u170
   397  007F96                     u171:
   398  007F96  EFAE  F03F         	goto	l1066
   399  007F9A                     u170:
   400  007F9A                     
   401                           ;spi_read_write.c: 103:     for(int j=0;j<14;j++)
   402  007F9A  0E00               	movlw	0
   403  007F9C  6E40               	movwf	(main@j+1)^0,c
   404  007F9E  0E00               	movlw	0
   405  007FA0  6E3F               	movwf	main@j^0,c
   406  007FA2                     l1080:
   407                           
   408                           ;spi_read_write.c: 104:     {;spi_read_write.c: 105:         lcddata(EEPROM_read(address
      +                          [j]));
   409  007FA2  90D8               	bcf	status,0,c
   410  007FA4  343F               	rlcf	main@j^0,w,c
   411  007FA6  6ED9               	movwf	fsr2l,c
   412  007FA8  3440               	rlcf	(main@j+1)^0,w,c
   413  007FAA  6EDA               	movwf	fsr2h,c
   414  007FAC  0E01               	movlw	low _address
   415  007FAE  26D9               	addwf	fsr2l,f,c
   416  007FB0  0E00               	movlw	high _address
   417  007FB2  22DA               	addwfc	fsr2h,f,c
   418  007FB4  CFDE F034          	movff	postinc2,EEPROM_read@address
   419  007FB8  CFDD F035          	movff	postdec2,EEPROM_read@address+1
   420  007FBC  ECEA  F03E         	call	_EEPROM_read	;wreg free
   421  007FC0  EC9E  F03E         	call	_lcddata
   422  007FC4                     
   423                           ;spi_read_write.c: 106:         delay(100);
   424  007FC4  0E00               	movlw	0
   425  007FC6  6E38               	movwf	(delay@nMilliseconds+1)^0,c
   426  007FC8  0E64               	movlw	100
   427  007FCA  6E37               	movwf	delay@nMilliseconds^0,c
   428  007FCC  EC23  F03F         	call	_delay	;wreg free
   429  007FD0                     
   430                           ;spi_read_write.c: 107:     }
   431  007FD0  4A3F               	infsnz	main@j^0,f,c
   432  007FD2  2A40               	incf	(main@j+1)^0,f,c
   433  007FD4  BE40               	btfsc	(main@j+1)^0,7,c
   434  007FD6  EFF6  F03F         	goto	u181
   435  007FDA  5040               	movf	(main@j+1)^0,w,c
   436  007FDC  E109               	bnz	u180
   437  007FDE  0E0E               	movlw	14
   438  007FE0  5C3F               	subwf	main@j^0,w,c
   439  007FE2  A0D8               	btfss	status,0,c
   440  007FE4  EFF6  F03F         	goto	u181
   441  007FE8  EFF8  F03F         	goto	u180
   442  007FEC                     u181:
   443  007FEC  EFD1  F03F         	goto	l1080
   444  007FF0                     u180:
   445  007FF0                     
   446                           ;spi_read_write.c: 109:     delay(500);
   447  007FF0  0E01               	movlw	1
   448  007FF2  6E38               	movwf	(delay@nMilliseconds+1)^0,c
   449  007FF4  0EF4               	movlw	244
   450  007FF6  6E37               	movwf	delay@nMilliseconds^0,c
   451  007FF8  EC23  F03F         	call	_delay	;wreg free
   452  007FFC  EF00  F000         	goto	start
   453  008000                     __end_of_main:
   454                           	callstack 0
   455                           
   456 ;; *************** function _lcddata *****************
   457 ;; Defined at:
   458 ;;		line 177 in file "spi_read_write.c"
   459 ;; Parameters:    Size  Location     Type
   460 ;;  value           1    wreg     unsigned char 
   461 ;; Auto vars:     Size  Location     Type
   462 ;;  value           1    6[COMRAM] unsigned char 
   463 ;; Return value:  Size  Location     Type
   464 ;;                  1    wreg      void 
   465 ;; Registers used:
   466 ;;		wreg, status,2, status,0, cstack
   467 ;; Tracked objects:
   468 ;;		On entry : 0/0
   469 ;;		On exit  : 0/0
   470 ;;		Unchanged: 0/0
   471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   472 ;;      Params:         0       0       0       0       0       0       0
   473 ;;      Locals:         1       0       0       0       0       0       0
   474 ;;      Temps:          0       0       0       0       0       0       0
   475 ;;      Totals:         1       0       0       0       0       0       0
   476 ;;Total ram usage:        1 bytes
   477 ;; Hardware stack levels used: 1
   478 ;; Hardware stack levels required when called: 1
   479 ;; This function calls:
   480 ;;		_msdelay
   481 ;; This function is called by:
   482 ;;		_main
   483 ;; This function uses a non-reentrant model
   484 ;;
   485                           
   486                           	psect	text1
   487  007D3C                     __ptext1:
   488                           	callstack 0
   489  007D3C                     _lcddata:
   490                           	callstack 29
   491                           
   492                           ;incstack = 0
   493                           ;lcddata@value stored from wreg
   494  007D3C  6E37               	movwf	lcddata@value^0,c
   495  007D3E                     
   496                           ;spi_read_write.c: 177: void lcddata (unsigned char value);spi_read_write.c: 178: {;spi_
      +                          read_write.c: 179:     PORTD=value;
   497  007D3E  C037  FF83         	movff	lcddata@value,3971	;volatile
   498  007D42                     
   499                           ;spi_read_write.c: 180:     PORTEbits.RE0=1;
   500  007D42  8084               	bsf	132,0,c	;volatile
   501  007D44                     
   502                           ;spi_read_write.c: 181:     PORTEbits.RE1=0;
   503  007D44  9284               	bcf	132,1,c	;volatile
   504  007D46                     
   505                           ;spi_read_write.c: 182:     PORTEbits.RE2=1;
   506  007D46  8484               	bsf	132,2,c	;volatile
   507  007D48                     
   508                           ;spi_read_write.c: 183:     msdelay(1);
   509  007D48  0E00               	movlw	0
   510  007D4A  6E32               	movwf	(msdelay@itime+1)^0,c
   511  007D4C  0E01               	movlw	1
   512  007D4E  6E31               	movwf	msdelay@itime^0,c
   513  007D50  EC47  F03F         	call	_msdelay	;wreg free
   514  007D54                     
   515                           ;spi_read_write.c: 184:     PORTEbits.RE2=0;
   516  007D54  9484               	bcf	132,2,c	;volatile
   517  007D56  0012               	return		;funcret
   518  007D58                     __end_of_lcddata:
   519                           	callstack 0
   520                           
   521 ;; *************** function _lcdcmd *****************
   522 ;; Defined at:
   523 ;;		line 168 in file "spi_read_write.c"
   524 ;; Parameters:    Size  Location     Type
   525 ;;  value           1    wreg     unsigned char 
   526 ;; Auto vars:     Size  Location     Type
   527 ;;  value           1    6[COMRAM] unsigned char 
   528 ;; Return value:  Size  Location     Type
   529 ;;                  1    wreg      void 
   530 ;; Registers used:
   531 ;;		wreg, status,2, status,0, cstack
   532 ;; Tracked objects:
   533 ;;		On entry : 0/0
   534 ;;		On exit  : 0/0
   535 ;;		Unchanged: 0/0
   536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   537 ;;      Params:         0       0       0       0       0       0       0
   538 ;;      Locals:         1       0       0       0       0       0       0
   539 ;;      Temps:          0       0       0       0       0       0       0
   540 ;;      Totals:         1       0       0       0       0       0       0
   541 ;;Total ram usage:        1 bytes
   542 ;; Hardware stack levels used: 1
   543 ;; Hardware stack levels required when called: 1
   544 ;; This function calls:
   545 ;;		_msdelay
   546 ;; This function is called by:
   547 ;;		_main
   548 ;; This function uses a non-reentrant model
   549 ;;
   550                           
   551                           	psect	text2
   552  007D20                     __ptext2:
   553                           	callstack 0
   554  007D20                     _lcdcmd:
   555                           	callstack 29
   556                           
   557                           ;incstack = 0
   558                           ;lcdcmd@value stored from wreg
   559  007D20  6E37               	movwf	lcdcmd@value^0,c
   560  007D22                     
   561                           ;spi_read_write.c: 168: void lcdcmd (unsigned char value);spi_read_write.c: 169: {;spi_r
      +                          ead_write.c: 170:     PORTD=value;
   562  007D22  C037  FF83         	movff	lcdcmd@value,3971	;volatile
   563  007D26                     
   564                           ;spi_read_write.c: 171:     PORTEbits.RE0=0;
   565  007D26  9084               	bcf	132,0,c	;volatile
   566  007D28                     
   567                           ;spi_read_write.c: 172:     PORTEbits.RE1=0;
   568  007D28  9284               	bcf	132,1,c	;volatile
   569  007D2A                     
   570                           ;spi_read_write.c: 173:     PORTEbits.RE2=1;
   571  007D2A  8484               	bsf	132,2,c	;volatile
   572  007D2C                     
   573                           ;spi_read_write.c: 174:     msdelay(1);
   574  007D2C  0E00               	movlw	0
   575  007D2E  6E32               	movwf	(msdelay@itime+1)^0,c
   576  007D30  0E01               	movlw	1
   577  007D32  6E31               	movwf	msdelay@itime^0,c
   578  007D34  EC47  F03F         	call	_msdelay	;wreg free
   579  007D38                     
   580                           ;spi_read_write.c: 175:     PORTEbits.RE2=0;
   581  007D38  9484               	bcf	132,2,c	;volatile
   582  007D3A  0012               	return		;funcret
   583  007D3C                     __end_of_lcdcmd:
   584                           	callstack 0
   585                           
   586 ;; *************** function _msdelay *****************
   587 ;; Defined at:
   588 ;;		line 186 in file "spi_read_write.c"
   589 ;; Parameters:    Size  Location     Type
   590 ;;  itime           2    0[COMRAM] unsigned int 
   591 ;; Auto vars:     Size  Location     Type
   592 ;;  j               2    4[COMRAM] int 
   593 ;;  i               2    2[COMRAM] int 
   594 ;; Return value:  Size  Location     Type
   595 ;;                  1    wreg      void 
   596 ;; Registers used:
   597 ;;		wreg, status,2, status,0
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   603 ;;      Params:         2       0       0       0       0       0       0
   604 ;;      Locals:         4       0       0       0       0       0       0
   605 ;;      Temps:          0       0       0       0       0       0       0
   606 ;;      Totals:         6       0       0       0       0       0       0
   607 ;;Total ram usage:        6 bytes
   608 ;; Hardware stack levels used: 1
   609 ;; This function calls:
   610 ;;		Nothing
   611 ;; This function is called by:
   612 ;;		_main
   613 ;;		_lcdcmd
   614 ;;		_lcddata
   615 ;; This function uses a non-reentrant model
   616 ;;
   617                           
   618                           	psect	text3
   619  007E8E                     __ptext3:
   620                           	callstack 0
   621  007E8E                     _msdelay:
   622                           	callstack 30
   623  007E8E                     
   624                           ;spi_read_write.c: 186: void msdelay (unsigned int itime);spi_read_write.c: 187: {;spi_r
      +                          ead_write.c: 188:     int i,j;;spi_read_write.c: 189:     for(i=0;i<itime;i++)
   625  007E8E  0E00               	movlw	0
   626  007E90  6E34               	movwf	(msdelay@i+1)^0,c
   627  007E92  0E00               	movlw	0
   628  007E94  6E33               	movwf	msdelay@i^0,c
   629  007E96  EF63  F03F         	goto	l970
   630  007E9A                     l958:
   631                           
   632                           ;spi_read_write.c: 190:     for(j=0;j<135;j++);
   633  007E9A  0E00               	movlw	0
   634  007E9C  6E36               	movwf	(msdelay@j+1)^0,c
   635  007E9E  0E00               	movlw	0
   636  007EA0  6E35               	movwf	msdelay@j^0,c
   637  007EA2                     l964:
   638  007EA2  4A35               	infsnz	msdelay@j^0,f,c
   639  007EA4  2A36               	incf	(msdelay@j+1)^0,f,c
   640  007EA6  BE36               	btfsc	(msdelay@j+1)^0,7,c
   641  007EA8  EF5F  F03F         	goto	u111
   642  007EAC  5036               	movf	(msdelay@j+1)^0,w,c
   643  007EAE  E109               	bnz	u110
   644  007EB0  0E87               	movlw	135
   645  007EB2  5C35               	subwf	msdelay@j^0,w,c
   646  007EB4  A0D8               	btfss	status,0,c
   647  007EB6  EF5F  F03F         	goto	u111
   648  007EBA  EF61  F03F         	goto	u110
   649  007EBE                     u111:
   650  007EBE  EF51  F03F         	goto	l964
   651  007EC2                     u110:
   652  007EC2  4A33               	infsnz	msdelay@i^0,f,c
   653  007EC4  2A34               	incf	(msdelay@i+1)^0,f,c
   654  007EC6                     l970:
   655  007EC6  5031               	movf	msdelay@itime^0,w,c
   656  007EC8  5C33               	subwf	msdelay@i^0,w,c
   657  007ECA  5032               	movf	(msdelay@itime+1)^0,w,c
   658  007ECC  5834               	subwfb	(msdelay@i+1)^0,w,c
   659  007ECE  A0D8               	btfss	status,0,c
   660  007ED0  EF6C  F03F         	goto	u121
   661  007ED4  EF6E  F03F         	goto	u120
   662  007ED8                     u121:
   663  007ED8  EF4D  F03F         	goto	l958
   664  007EDC                     u120:
   665  007EDC  0012               	return		;funcret
   666  007EDE                     __end_of_msdelay:
   667                           	callstack 0
   668                           
   669 ;; *************** function _delay *****************
   670 ;; Defined at:
   671 ;;		line 49 in file "spi_read_write.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;  nMillisecond    2    6[COMRAM] unsigned int 
   674 ;; Auto vars:     Size  Location     Type
   675 ;;  nCycles         4    8[COMRAM] unsigned long 
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   685 ;;      Params:         2       0       0       0       0       0       0
   686 ;;      Locals:         4       0       0       0       0       0       0
   687 ;;      Temps:          0       0       0       0       0       0       0
   688 ;;      Totals:         6       0       0       0       0       0       0
   689 ;;Total ram usage:        6 bytes
   690 ;; Hardware stack levels used: 1
   691 ;; Hardware stack levels required when called: 1
   692 ;; This function calls:
   693 ;;		___wmul
   694 ;; This function is called by:
   695 ;;		_main
   696 ;; This function uses a non-reentrant model
   697 ;;
   698                           
   699                           	psect	text4
   700  007E46                     __ptext4:
   701                           	callstack 0
   702  007E46                     _delay:
   703                           	callstack 29
   704  007E46                     
   705                           ;spi_read_write.c: 49: void delay(unsigned int nMilliseconds);spi_read_write.c: 50: {;sp
      +                          i_read_write.c: 52:     unsigned long nCycles = nMilliseconds * 100;
   706  007E46  C037  F031         	movff	delay@nMilliseconds,___wmul@multiplier
   707  007E4A  C038  F032         	movff	delay@nMilliseconds+1,___wmul@multiplier+1
   708  007E4E  0E00               	movlw	0
   709  007E50  6E34               	movwf	(___wmul@multiplicand+1)^0,c
   710  007E52  0E64               	movlw	100
   711  007E54  6E33               	movwf	___wmul@multiplicand^0,c
   712  007E56  ECAC  F03E         	call	___wmul	;wreg free
   713  007E5A  C031  F039         	movff	?___wmul,delay@nCycles
   714  007E5E  C032  F03A         	movff	?___wmul+1,delay@nCycles+1
   715  007E62  6A3B               	clrf	(delay@nCycles+2)^0,c
   716  007E64  6A3C               	clrf	(delay@nCycles+3)^0,c
   717  007E66                     l980:
   718  007E66  0639               	decf	delay@nCycles^0,f,c
   719  007E68  0E00               	movlw	0
   720  007E6A  5A3A               	subwfb	(delay@nCycles+1)^0,f,c
   721  007E6C  5A3B               	subwfb	(delay@nCycles+2)^0,f,c
   722  007E6E  5A3C               	subwfb	(delay@nCycles+3)^0,f,c
   723  007E70  2839               	incf	delay@nCycles^0,w,c
   724  007E72  E10A               	bnz	u131
   725  007E74  283A               	incf	(delay@nCycles+1)^0,w,c
   726  007E76  E108               	bnz	u131
   727  007E78  283B               	incf	(delay@nCycles+2)^0,w,c
   728  007E7A  E106               	bnz	u131
   729  007E7C  283C               	incf	(delay@nCycles+3)^0,w,c
   730  007E7E  A4D8               	btfss	status,2,c
   731  007E80  EF44  F03F         	goto	u131
   732  007E84  EF46  F03F         	goto	u130
   733  007E88                     u131:
   734  007E88  EF33  F03F         	goto	l980
   735  007E8C                     u130:
   736  007E8C  0012               	return		;funcret
   737  007E8E                     __end_of_delay:
   738                           	callstack 0
   739                           
   740 ;; *************** function ___wmul *****************
   741 ;; Defined at:
   742 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;  multiplier      2    0[COMRAM] unsigned int 
   745 ;;  multiplicand    2    2[COMRAM] unsigned int 
   746 ;; Auto vars:     Size  Location     Type
   747 ;;  product         2    4[COMRAM] unsigned int 
   748 ;; Return value:  Size  Location     Type
   749 ;;                  2    0[COMRAM] unsigned int 
   750 ;; Registers used:
   751 ;;		wreg, status,2, status,0, prodl, prodh
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   757 ;;      Params:         4       0       0       0       0       0       0
   758 ;;      Locals:         2       0       0       0       0       0       0
   759 ;;      Temps:          0       0       0       0       0       0       0
   760 ;;      Totals:         6       0       0       0       0       0       0
   761 ;;Total ram usage:        6 bytes
   762 ;; Hardware stack levels used: 1
   763 ;; This function calls:
   764 ;;		Nothing
   765 ;; This function is called by:
   766 ;;		_delay
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text5
   771  007D58                     __ptext5:
   772                           	callstack 0
   773  007D58                     ___wmul:
   774                           	callstack 29
   775  007D58  5031               	movf	___wmul@multiplier^0,w,c
   776  007D5A  0233               	mulwf	___wmul@multiplicand^0,c
   777  007D5C  CFF3 F035          	movff	prodl,___wmul@product
   778  007D60  CFF4 F036          	movff	prodh,___wmul@product+1
   779  007D64  5031               	movf	___wmul@multiplier^0,w,c
   780  007D66  0234               	mulwf	(___wmul@multiplicand+1)^0,c
   781  007D68  50F3               	movf	243,w,c
   782  007D6A  2636               	addwf	(___wmul@product+1)^0,f,c
   783  007D6C  5032               	movf	(___wmul@multiplier+1)^0,w,c
   784  007D6E  0233               	mulwf	___wmul@multiplicand^0,c
   785  007D70  50F3               	movf	243,w,c
   786  007D72  2636               	addwf	(___wmul@product+1)^0,f,c
   787  007D74  C035  F031         	movff	___wmul@product,?___wmul
   788  007D78  C036  F032         	movff	___wmul@product+1,?___wmul+1
   789  007D7C  0012               	return		;funcret
   790  007D7E                     __end_of___wmul:
   791                           	callstack 0
   792                           
   793 ;; *************** function _SPI_init *****************
   794 ;; Defined at:
   795 ;;		line 55 in file "spi_read_write.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;		None
   798 ;; Auto vars:     Size  Location     Type
   799 ;;		None
   800 ;; Return value:  Size  Location     Type
   801 ;;                  1    wreg      void 
   802 ;; Registers used:
   803 ;;		wreg, status,2
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   809 ;;      Params:         0       0       0       0       0       0       0
   810 ;;      Locals:         0       0       0       0       0       0       0
   811 ;;      Temps:          0       0       0       0       0       0       0
   812 ;;      Totals:         0       0       0       0       0       0       0
   813 ;;Total ram usage:        0 bytes
   814 ;; Hardware stack levels used: 1
   815 ;; This function calls:
   816 ;;		Nothing
   817 ;; This function is called by:
   818 ;;		_main
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text6
   823  007CC8                     __ptext6:
   824                           	callstack 0
   825  007CC8                     _SPI_init:
   826                           	callstack 30
   827  007CC8                     
   828                           ;spi_read_write.c: 57:     TRISA5 = 1;
   829  007CC8  8A92               	bsf	3986,5,c	;volatile
   830                           
   831                           ;spi_read_write.c: 58:     TRISC3 = 0;
   832  007CCA  9694               	bcf	3988,3,c	;volatile
   833                           
   834                           ;spi_read_write.c: 59:     TRISC4 = 1;
   835  007CCC  8894               	bsf	3988,4,c	;volatile
   836                           
   837                           ;spi_read_write.c: 60:     TRISC5 = 0;
   838  007CCE  9A94               	bcf	3988,5,c	;volatile
   839                           
   840                           ;spi_read_write.c: 61:     TRISA5 = 0;
   841  007CD0  9A92               	bcf	3986,5,c	;volatile
   842  007CD2                     
   843                           ;spi_read_write.c: 64:     SSPSTAT = 0x80;
   844  007CD2  0E80               	movlw	128
   845  007CD4  6EC7               	movwf	199,c	;volatile
   846                           
   847                           ;spi_read_write.c: 65:     SSPCON1 = 0x30;
   848  007CD6  0E30               	movlw	48
   849  007CD8  6EC6               	movwf	198,c	;volatile
   850  007CDA  0012               	return		;funcret
   851  007CDC                     __end_of_SPI_init:
   852                           	callstack 0
   853                           
   854 ;; *************** function _EEPROM_write *****************
   855 ;; Defined at:
   856 ;;		line 112 in file "spi_read_write.c"
   857 ;; Parameters:    Size  Location     Type
   858 ;;  address         2    3[COMRAM] int 
   859 ;;  data            1    5[COMRAM] unsigned char 
   860 ;; Auto vars:     Size  Location     Type
   861 ;;		None
   862 ;; Return value:  Size  Location     Type
   863 ;;                  1    wreg      void 
   864 ;; Registers used:
   865 ;;		wreg, status,2, status,0, cstack
   866 ;; Tracked objects:
   867 ;;		On entry : 0/0
   868 ;;		On exit  : 0/0
   869 ;;		Unchanged: 0/0
   870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   871 ;;      Params:         3       0       0       0       0       0       0
   872 ;;      Locals:         0       0       0       0       0       0       0
   873 ;;      Temps:          0       0       0       0       0       0       0
   874 ;;      Totals:         3       0       0       0       0       0       0
   875 ;;Total ram usage:        3 bytes
   876 ;; Hardware stack levels used: 1
   877 ;; Hardware stack levels required when called: 3
   878 ;; This function calls:
   879 ;;		_EEPROM_busy
   880 ;;		_SPI_write
   881 ;; This function is called by:
   882 ;;		_main
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886                           	psect	text7
   887  007E0A                     __ptext7:
   888                           	callstack 0
   889  007E0A                     _EEPROM_write:
   890                           	callstack 27
   891  007E0A                     l984:
   892  007E0A  EC5E  F03E         	call	_EEPROM_busy	;wreg free
   893  007E0E  06E8               	decf	wreg,f,c
   894  007E10  B4D8               	btfsc	status,2,c
   895  007E12  EF0D  F03F         	goto	u141
   896  007E16  EF0F  F03F         	goto	u140
   897  007E1A                     u141:
   898  007E1A  EF05  F03F         	goto	l984
   899  007E1E                     u140:
   900  007E1E                     
   901                           ;spi_read_write.c: 117:     RA5 = 0;
   902  007E1E  9A80               	bcf	3968,5,c	;volatile
   903  007E20                     
   904                           ;spi_read_write.c: 118:     SPI_write(0x06);
   905  007E20  0E06               	movlw	6
   906  007E22  EC6E  F03E         	call	_SPI_write
   907  007E26                     
   908                           ;spi_read_write.c: 119:     RA5 = 1;
   909  007E26  8A80               	bsf	3968,5,c	;volatile
   910  007E28                     
   911                           ;spi_read_write.c: 122:     RA5 = 0;
   912  007E28  9A80               	bcf	3968,5,c	;volatile
   913                           
   914                           ;spi_read_write.c: 123:     SPI_write(0x02);
   915  007E2A  0E02               	movlw	2
   916  007E2C  EC6E  F03E         	call	_SPI_write
   917  007E30                     
   918                           ;spi_read_write.c: 124:     SPI_write(address>>8);
   919  007E30  5035               	movf	(EEPROM_write@address+1)^0,w,c
   920  007E32  EC6E  F03E         	call	_SPI_write
   921  007E36                     
   922                           ;spi_read_write.c: 125:     SPI_write(address);
   923  007E36  5034               	movf	EEPROM_write@address^0,w,c
   924  007E38  EC6E  F03E         	call	_SPI_write
   925  007E3C                     
   926                           ;spi_read_write.c: 126:     SPI_write(data);
   927  007E3C  5036               	movf	EEPROM_write@data^0,w,c
   928  007E3E  EC6E  F03E         	call	_SPI_write
   929  007E42                     
   930                           ;spi_read_write.c: 127:     RA5 = 1;
   931  007E42  8A80               	bsf	3968,5,c	;volatile
   932  007E44  0012               	return		;funcret
   933  007E46                     __end_of_EEPROM_write:
   934                           	callstack 0
   935                           
   936 ;; *************** function _EEPROM_read *****************
   937 ;; Defined at:
   938 ;;		line 130 in file "spi_read_write.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;  address         2    3[COMRAM] int 
   941 ;; Auto vars:     Size  Location     Type
   942 ;;  data            1    5[COMRAM] unsigned char 
   943 ;; Return value:  Size  Location     Type
   944 ;;                  1    wreg      unsigned char 
   945 ;; Registers used:
   946 ;;		wreg, status,2, status,0, cstack
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   952 ;;      Params:         2       0       0       0       0       0       0
   953 ;;      Locals:         1       0       0       0       0       0       0
   954 ;;      Temps:          0       0       0       0       0       0       0
   955 ;;      Totals:         3       0       0       0       0       0       0
   956 ;;Total ram usage:        3 bytes
   957 ;; Hardware stack levels used: 1
   958 ;; Hardware stack levels required when called: 3
   959 ;; This function calls:
   960 ;;		_EEPROM_busy
   961 ;;		_SPI_read
   962 ;;		_SPI_write
   963 ;; This function is called by:
   964 ;;		_main
   965 ;; This function uses a non-reentrant model
   966 ;;
   967                           
   968                           	psect	text8
   969  007DD4                     __ptext8:
   970                           	callstack 0
   971  007DD4                     _EEPROM_read:
   972                           	callstack 27
   973  007DD4                     l1014:
   974  007DD4  EC5E  F03E         	call	_EEPROM_busy	;wreg free
   975  007DD8  06E8               	decf	wreg,f,c
   976  007DDA  B4D8               	btfsc	status,2,c
   977  007DDC  EFF2  F03E         	goto	u151
   978  007DE0  EFF4  F03E         	goto	u150
   979  007DE4                     u151:
   980  007DE4  EFEA  F03E         	goto	l1014
   981  007DE8                     u150:
   982  007DE8                     
   983                           ;spi_read_write.c: 134:     RA5 = 0;
   984  007DE8  9A80               	bcf	3968,5,c	;volatile
   985  007DEA                     
   986                           ;spi_read_write.c: 135:     SPI_write(0x03);
   987  007DEA  0E03               	movlw	3
   988  007DEC  EC6E  F03E         	call	_SPI_write
   989  007DF0                     
   990                           ;spi_read_write.c: 136:     SPI_write(address>>8);
   991  007DF0  5035               	movf	(EEPROM_read@address+1)^0,w,c
   992  007DF2  EC6E  F03E         	call	_SPI_write
   993  007DF6                     
   994                           ;spi_read_write.c: 137:     SPI_write(address);
   995  007DF6  5034               	movf	EEPROM_read@address^0,w,c
   996  007DF8  EC6E  F03E         	call	_SPI_write
   997  007DFC                     
   998                           ;spi_read_write.c: 138:     char data = SPI_read(0);
   999  007DFC  0E00               	movlw	0
  1000  007DFE  EC84  F03E         	call	_SPI_read
  1001  007E02  6E36               	movwf	EEPROM_read@data^0,c
  1002  007E04                     
  1003                           ;spi_read_write.c: 139:     RA5 = 1;
  1004  007E04  8A80               	bsf	3968,5,c	;volatile
  1005  007E06                     
  1006                           ;spi_read_write.c: 141:     return data;
  1007  007E06  5036               	movf	EEPROM_read@data^0,w,c
  1008  007E08  0012               	return		;funcret
  1009  007E0A                     __end_of_EEPROM_read:
  1010                           	callstack 0
  1011                           
  1012 ;; *************** function _EEPROM_busy *****************
  1013 ;; Defined at:
  1014 ;;		line 154 in file "spi_read_write.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;		None
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;  busy            1    2[COMRAM] unsigned char 
  1019 ;; Return value:  Size  Location     Type
  1020 ;;                  1    wreg      unsigned char 
  1021 ;; Registers used:
  1022 ;;		wreg, status,2, status,0, cstack
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1028 ;;      Params:         0       0       0       0       0       0       0
  1029 ;;      Locals:         1       0       0       0       0       0       0
  1030 ;;      Temps:          0       0       0       0       0       0       0
  1031 ;;      Totals:         1       0       0       0       0       0       0
  1032 ;;Total ram usage:        1 bytes
  1033 ;; Hardware stack levels used: 1
  1034 ;; Hardware stack levels required when called: 2
  1035 ;; This function calls:
  1036 ;;		_EEPROM_status
  1037 ;; This function is called by:
  1038 ;;		_EEPROM_write
  1039 ;;		_EEPROM_read
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text9
  1044  007CBC                     __ptext9:
  1045                           	callstack 0
  1046  007CBC                     _EEPROM_busy:
  1047                           	callstack 27
  1048  007CBC                     
  1049                           ;spi_read_write.c: 156:     char busy = EEPROM_status();
  1050  007CBC  EC79  F03E         	call	_EEPROM_status	;wreg free
  1051  007CC0  6E33               	movwf	EEPROM_busy@busy^0,c
  1052  007CC2                     
  1053                           ;spi_read_write.c: 158:     return (busy & 0x01);
  1054  007CC2  5033               	movf	EEPROM_busy@busy^0,w,c
  1055  007CC4  0B01               	andlw	1
  1056  007CC6  0012               	return		;funcret
  1057  007CC8                     __end_of_EEPROM_busy:
  1058                           	callstack 0
  1059                           
  1060 ;; *************** function _EEPROM_status *****************
  1061 ;; Defined at:
  1062 ;;		line 144 in file "spi_read_write.c"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;		None
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;  status          1    1[COMRAM] unsigned char 
  1067 ;; Return value:  Size  Location     Type
  1068 ;;                  1    wreg      unsigned char 
  1069 ;; Registers used:
  1070 ;;		wreg, status,2, cstack
  1071 ;; Tracked objects:
  1072 ;;		On entry : 0/0
  1073 ;;		On exit  : 0/0
  1074 ;;		Unchanged: 0/0
  1075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1076 ;;      Params:         0       0       0       0       0       0       0
  1077 ;;      Locals:         1       0       0       0       0       0       0
  1078 ;;      Temps:          0       0       0       0       0       0       0
  1079 ;;      Totals:         1       0       0       0       0       0       0
  1080 ;;Total ram usage:        1 bytes
  1081 ;; Hardware stack levels used: 1
  1082 ;; Hardware stack levels required when called: 1
  1083 ;; This function calls:
  1084 ;;		_SPI_read
  1085 ;;		_SPI_write
  1086 ;; This function is called by:
  1087 ;;		_EEPROM_busy
  1088 ;;		_EEPROM_wrEnable
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           	psect	text10
  1093  007CF2                     __ptext10:
  1094                           	callstack 0
  1095  007CF2                     _EEPROM_status:
  1096                           	callstack 27
  1097  007CF2                     
  1098                           ;spi_read_write.c: 146:     RA5 = 0;
  1099  007CF2  9A80               	bcf	3968,5,c	;volatile
  1100  007CF4                     
  1101                           ;spi_read_write.c: 147:     SPI_write(0x05);
  1102  007CF4  0E05               	movlw	5
  1103  007CF6  EC6E  F03E         	call	_SPI_write
  1104  007CFA                     
  1105                           ;spi_read_write.c: 148:     char status = SPI_read(0) ;
  1106  007CFA  0E00               	movlw	0
  1107  007CFC  EC84  F03E         	call	_SPI_read
  1108  007D00  6E32               	movwf	EEPROM_status@status^0,c
  1109  007D02                     
  1110                           ;spi_read_write.c: 149:     RA5 = 1;
  1111  007D02  8A80               	bsf	3968,5,c	;volatile
  1112  007D04                     
  1113                           ;spi_read_write.c: 151:     return status;
  1114  007D04  5032               	movf	EEPROM_status@status^0,w,c
  1115  007D06  0012               	return		;funcret
  1116  007D08                     __end_of_EEPROM_status:
  1117                           	callstack 0
  1118                           
  1119 ;; *************** function _SPI_write *****************
  1120 ;; Defined at:
  1121 ;;		line 68 in file "spi_read_write.c"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;  data            1    wreg     unsigned char 
  1124 ;; Auto vars:     Size  Location     Type
  1125 ;;  data            1    0[COMRAM] unsigned char 
  1126 ;; Return value:  Size  Location     Type
  1127 ;;                  1    wreg      void 
  1128 ;; Registers used:
  1129 ;;		wreg
  1130 ;; Tracked objects:
  1131 ;;		On entry : 0/0
  1132 ;;		On exit  : 0/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1135 ;;      Params:         0       0       0       0       0       0       0
  1136 ;;      Locals:         1       0       0       0       0       0       0
  1137 ;;      Temps:          0       0       0       0       0       0       0
  1138 ;;      Totals:         1       0       0       0       0       0       0
  1139 ;;Total ram usage:        1 bytes
  1140 ;; Hardware stack levels used: 1
  1141 ;; This function calls:
  1142 ;;		Nothing
  1143 ;; This function is called by:
  1144 ;;		_EEPROM_write
  1145 ;;		_EEPROM_read
  1146 ;;		_EEPROM_status
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150                           	psect	text11
  1151  007CDC                     __ptext11:
  1152                           	callstack 0
  1153  007CDC                     _SPI_write:
  1154                           	callstack 29
  1155                           
  1156                           ;incstack = 0
  1157                           ;SPI_write@data stored from wreg
  1158  007CDC  6E31               	movwf	SPI_write@data^0,c
  1159  007CDE                     
  1160                           ;spi_read_write.c: 68: void SPI_write(char data);spi_read_write.c: 69: {;spi_read_write.
      +                          c: 70:     SSPBUF = data;
  1161  007CDE  C031  FFC9         	movff	SPI_write@data,4041	;volatile
  1162  007CE2                     l58:
  1163  007CE2  A0C7               	btfss	4039,0,c	;volatile
  1164  007CE4  EF76  F03E         	goto	u11
  1165  007CE8  EF78  F03E         	goto	u10
  1166  007CEC                     u11:
  1167  007CEC  EF71  F03E         	goto	l58
  1168  007CF0                     u10:
  1169  007CF0  0012               	return		;funcret
  1170  007CF2                     __end_of_SPI_write:
  1171                           	callstack 0
  1172                           
  1173 ;; *************** function _SPI_read *****************
  1174 ;; Defined at:
  1175 ;;		line 75 in file "spi_read_write.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;  dummy           1    wreg     unsigned char 
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;  dummy           1    0[COMRAM] unsigned char 
  1180 ;; Return value:  Size  Location     Type
  1181 ;;                  1    wreg      unsigned char 
  1182 ;; Registers used:
  1183 ;;		wreg, status,2
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1189 ;;      Params:         0       0       0       0       0       0       0
  1190 ;;      Locals:         1       0       0       0       0       0       0
  1191 ;;      Temps:          0       0       0       0       0       0       0
  1192 ;;      Totals:         1       0       0       0       0       0       0
  1193 ;;Total ram usage:        1 bytes
  1194 ;; Hardware stack levels used: 1
  1195 ;; This function calls:
  1196 ;;		Nothing
  1197 ;; This function is called by:
  1198 ;;		_EEPROM_read
  1199 ;;		_EEPROM_status
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           	psect	text12
  1204  007D08                     __ptext12:
  1205                           	callstack 0
  1206  007D08                     _SPI_read:
  1207                           	callstack 27
  1208                           
  1209                           ;incstack = 0
  1210                           ;SPI_read@dummy stored from wreg
  1211  007D08  6E31               	movwf	SPI_read@dummy^0,c
  1212  007D0A                     
  1213                           ;spi_read_write.c: 75: char SPI_read(char dummy);spi_read_write.c: 76: {;spi_read_write.
      +                          c: 77:     SSPBUF = dummy;
  1214  007D0A  C031  FFC9         	movff	SPI_read@dummy,4041	;volatile
  1215  007D0E                     l64:
  1216  007D0E  A0C7               	btfss	4039,0,c	;volatile
  1217  007D10  EF8C  F03E         	goto	u21
  1218  007D14  EF8E  F03E         	goto	u20
  1219  007D18                     u21:
  1220  007D18  EF87  F03E         	goto	l64
  1221  007D1C                     u20:
  1222  007D1C                     
  1223                           ;spi_read_write.c: 80:     return SSPBUF;
  1224  007D1C  50C9               	movf	201,w,c	;volatile
  1225  007D1E  0012               	return		;funcret
  1226  007D20                     __end_of_SPI_read:
  1227                           	callstack 0
  1228  0000                     
  1229                           	psect	rparam
  1230  0000                     
  1231                           	psect	idloc
  1232                           
  1233                           ;Config register IDLOC0 @ 0x200000
  1234                           ;	unspecified, using default values
  1235  200000                     	org	2097152
  1236  200000  FF                 	db	255
  1237                           
  1238                           ;Config register IDLOC1 @ 0x200001
  1239                           ;	unspecified, using default values
  1240  200001                     	org	2097153
  1241  200001  FF                 	db	255
  1242                           
  1243                           ;Config register IDLOC2 @ 0x200002
  1244                           ;	unspecified, using default values
  1245  200002                     	org	2097154
  1246  200002  FF                 	db	255
  1247                           
  1248                           ;Config register IDLOC3 @ 0x200003
  1249                           ;	unspecified, using default values
  1250  200003                     	org	2097155
  1251  200003  FF                 	db	255
  1252                           
  1253                           ;Config register IDLOC4 @ 0x200004
  1254                           ;	unspecified, using default values
  1255  200004                     	org	2097156
  1256  200004  FF                 	db	255
  1257                           
  1258                           ;Config register IDLOC5 @ 0x200005
  1259                           ;	unspecified, using default values
  1260  200005                     	org	2097157
  1261  200005  FF                 	db	255
  1262                           
  1263                           ;Config register IDLOC6 @ 0x200006
  1264                           ;	unspecified, using default values
  1265  200006                     	org	2097158
  1266  200006  FF                 	db	255
  1267                           
  1268                           ;Config register IDLOC7 @ 0x200007
  1269                           ;	unspecified, using default values
  1270  200007                     	org	2097159
  1271  200007  FF                 	db	255
  1272                           
  1273                           	psect	config
  1274                           
  1275                           ; Padding undefined space
  1276  300000                     	org	3145728
  1277  300000  FF                 	db	255
  1278                           
  1279                           ;Config register CONFIG1H @ 0x300001
  1280                           ;	Oscillator Selection bits
  1281                           ;	OSC = HS, HS oscillator
  1282                           ;	Fail-Safe Clock Monitor Enable bit
  1283                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1284                           ;	Internal/External Oscillator Switchover bit
  1285                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1286  300001                     	org	3145729
  1287  300001  02                 	db	2
  1288                           
  1289                           ;Config register CONFIG2L @ 0x300002
  1290                           ;	Power-up Timer Enable bit
  1291                           ;	PWRT = OFF, PWRT disabled
  1292                           ;	Brown-out Reset Enable bits
  1293                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1294                           ;	Brown Out Reset Voltage bits
  1295                           ;	BORV = 3, Minimum setting
  1296  300002                     	org	3145730
  1297  300002  19                 	db	25
  1298                           
  1299                           ;Config register CONFIG2H @ 0x300003
  1300                           ;	Watchdog Timer Enable bit
  1301                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1302                           ;	Watchdog Timer Postscale Select bits
  1303                           ;	WDTPS = 32768, 1:32768
  1304  300003                     	org	3145731
  1305  300003  1E                 	db	30
  1306                           
  1307                           ; Padding undefined space
  1308  300004                     	org	3145732
  1309  300004  FF                 	db	255
  1310                           
  1311                           ;Config register CONFIG3H @ 0x300005
  1312                           ;	CCP2 MUX bit
  1313                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1314                           ;	PORTB A/D Enable bit
  1315                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  1316                           ;	Low-Power Timer1 Oscillator Enable bit
  1317                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1318                           ;	MCLR Pin Enable bit
  1319                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1320  300005                     	org	3145733
  1321  300005  83                 	db	131
  1322                           
  1323                           ;Config register CONFIG4L @ 0x300006
  1324                           ;	Stack Full/Underflow Reset Enable bit
  1325                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1326                           ;	Single-Supply ICSP Enable bit
  1327                           ;	LVP = ON, Single-Supply ICSP enabled
  1328                           ;	Extended Instruction Set Enable bit
  1329                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1330                           ;	Background Debugger Enable bit
  1331                           ;	DEBUG = 0x1, unprogrammed default
  1332  300006                     	org	3145734
  1333  300006  85                 	db	133
  1334                           
  1335                           ; Padding undefined space
  1336  300007                     	org	3145735
  1337  300007  FF                 	db	255
  1338                           
  1339                           ;Config register CONFIG5L @ 0x300008
  1340                           ;	Code Protection bit
  1341                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1342                           ;	Code Protection bit
  1343                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1344                           ;	Code Protection bit
  1345                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1346                           ;	Code Protection bit
  1347                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1348  300008                     	org	3145736
  1349  300008  0F                 	db	15
  1350                           
  1351                           ;Config register CONFIG5H @ 0x300009
  1352                           ;	Boot Block Code Protection bit
  1353                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1354                           ;	Data EEPROM Code Protection bit
  1355                           ;	CPD = OFF, Data EEPROM not code-protected
  1356  300009                     	org	3145737
  1357  300009  C0                 	db	192
  1358                           
  1359                           ;Config register CONFIG6L @ 0x30000A
  1360                           ;	Write Protection bit
  1361                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1362                           ;	Write Protection bit
  1363                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1364                           ;	Write Protection bit
  1365                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1366                           ;	Write Protection bit
  1367                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1368  30000A                     	org	3145738
  1369  30000A  0F                 	db	15
  1370                           
  1371                           ;Config register CONFIG6H @ 0x30000B
  1372                           ;	Configuration Register Write Protection bit
  1373                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1374                           ;	Boot Block Write Protection bit
  1375                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1376                           ;	Data EEPROM Write Protection bit
  1377                           ;	WRTD = OFF, Data EEPROM not write-protected
  1378  30000B                     	org	3145739
  1379  30000B  E0                 	db	224
  1380                           
  1381                           ;Config register CONFIG7L @ 0x30000C
  1382                           ;	Table Read Protection bit
  1383                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1384                           ;	Table Read Protection bit
  1385                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1386                           ;	Table Read Protection bit
  1387                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1388                           ;	Table Read Protection bit
  1389                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1390  30000C                     	org	3145740
  1391  30000C  0F                 	db	15
  1392                           
  1393                           ;Config register CONFIG7H @ 0x30000D
  1394                           ;	Boot Block Table Read Protection bit
  1395                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1396  30000D                     	org	3145741
  1397  30000D  40                 	db	64
  1398                           tosu	equ	0xFFF
  1399                           tosh	equ	0xFFE
  1400                           tosl	equ	0xFFD
  1401                           stkptr	equ	0xFFC
  1402                           pclatu	equ	0xFFB
  1403                           pclath	equ	0xFFA
  1404                           pcl	equ	0xFF9
  1405                           tblptru	equ	0xFF8
  1406                           tblptrh	equ	0xFF7
  1407                           tblptrl	equ	0xFF6
  1408                           tablat	equ	0xFF5
  1409                           prodh	equ	0xFF4
  1410                           prodl	equ	0xFF3
  1411                           indf0	equ	0xFEF
  1412                           postinc0	equ	0xFEE
  1413                           postdec0	equ	0xFED
  1414                           preinc0	equ	0xFEC
  1415                           plusw0	equ	0xFEB
  1416                           fsr0h	equ	0xFEA
  1417                           fsr0l	equ	0xFE9
  1418                           wreg	equ	0xFE8
  1419                           indf1	equ	0xFE7
  1420                           postinc1	equ	0xFE6
  1421                           postdec1	equ	0xFE5
  1422                           preinc1	equ	0xFE4
  1423                           plusw1	equ	0xFE3
  1424                           fsr1h	equ	0xFE2
  1425                           fsr1l	equ	0xFE1
  1426                           bsr	equ	0xFE0
  1427                           indf2	equ	0xFDF
  1428                           postinc2	equ	0xFDE
  1429                           postdec2	equ	0xFDD
  1430                           preinc2	equ	0xFDC
  1431                           plusw2	equ	0xFDB
  1432                           fsr2h	equ	0xFDA
  1433                           fsr2l	equ	0xFD9
  1434                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        48
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     18      66
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_delay
    _lcddata->_msdelay
    _lcdcmd->_msdelay
    _delay->___wmul
    _EEPROM_write->_EEPROM_busy
    _EEPROM_read->_EEPROM_busy
    _EEPROM_busy->_EEPROM_status
    _EEPROM_status->_SPI_read
    _EEPROM_status->_SPI_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    2318
                                             12 COMRAM     6     6      0
                        _EEPROM_read
                       _EEPROM_write
                           _SPI_init
                              _delay
                             _lcdcmd
                            _lcddata
                            _msdelay
 ---------------------------------------------------------------------------------
 (1) _lcddata                                              1     1      0     342
                                              6 COMRAM     1     1      0
                            _msdelay
 ---------------------------------------------------------------------------------
 (1) _lcdcmd                                               1     1      0     342
                                              6 COMRAM     1     1      0
                            _msdelay
 ---------------------------------------------------------------------------------
 (1) _msdelay                                              6     4      2     320
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _delay                                                6     4      2     584
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EEPROM_write                                         3     0      3     293
                                              3 COMRAM     3     0      3
                        _EEPROM_busy
                          _SPI_write
 ---------------------------------------------------------------------------------
 (1) _EEPROM_read                                          3     1      2     233
                                              3 COMRAM     3     1      2
                        _EEPROM_busy
                           _SPI_read
                          _SPI_write
 ---------------------------------------------------------------------------------
 (2) _EEPROM_busy                                          1     1      0      60
                                              2 COMRAM     1     1      0
                      _EEPROM_status
 ---------------------------------------------------------------------------------
 (3) _EEPROM_status                                        1     1      0      45
                                              1 COMRAM     1     1      0
                           _SPI_read
                          _SPI_write
 ---------------------------------------------------------------------------------
 (2) _SPI_write                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SPI_read                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM_read
     _EEPROM_busy
       _EEPROM_status
         _SPI_read
         _SPI_write
     _SPI_read
     _SPI_write
   _EEPROM_write
     _EEPROM_busy
     _SPI_write
   _SPI_init
   _delay
     ___wmul
   _lcdcmd
     _msdelay
   _lcddata
     _msdelay
   _msdelay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     12      42       1       52.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      42      15        0.0%
DATA                 0      0      42       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Dec 23 22:01:27 2021

                     _BF 007E38                       l52 7E8C                       l61 7CF0  
                     l55 7CDA                       l64 7D0E                       l66 7D1C  
                     l58 7CE2                       l90 7DE8                       l67 7D1E  
                     l91 7E08                       l84 7E1E                       l85 7E44  
                     l94 7D06                       l79 7FFC                       l97 7CC6  
                     u10 7CF0                       u11 7CEC                       u20 7D1C  
                     u21 7D18      ___wmul@multiplicand 0033       EEPROM_read@address 0034  
                    l103 7D3A                      l114 7EDC                      l106 7D56  
                    l117 7D7C                      l800 7D02                      l802 7D04  
                    l822 7CBC                      l824 7CC2                      l840 7CD2  
                    l790 7CDE                      l838 7CC8                      l792 7D0A  
                    l794 7CF2                      l970 7EC6                      l796 7CF4  
                    l972 7D58                      l980 7E66                      l964 7EA2  
                    l956 7E8E                      l798 7CFA                      l990 7E28  
                    l982 7E0A                      l974 7D74                      l966 7EA6  
                    l958 7E9A                      l992 7E30                      l984 7E0A  
                    l968 7EC2                      l994 7E36                      l986 7E20  
                    l978 7E46                      l996 7E3C                      l988 7E26  
                    l998 7E42                      _RA5 007C05                      u110 7EC2  
                    u111 7EBE                      u120 7EDC                      u121 7ED8  
                    u130 7E8C                      u131 7E88                      u140 7E1E  
                    u141 7E1A                      u150 7DE8                      u151 7DE4  
                    u160 7F50                      u161 7F4C                      u170 7F9A  
                    u171 7F96                      u180 7FF0                      u181 7FEC  
            lcdcmd@value 0037                      wreg 000FE8                     l1000 7D22  
                   l1010 7D38                     l1002 7D26                     l1020 7DF6  
                   l1012 7DD4                     l1004 7D28                     l1022 7DFC  
                   l1014 7DD4                     l1006 7D2A                     l1030 7D3E  
                   l1024 7E04                     l1016 7DEA                     l1008 7D2C  
                   l1040 7D54                     l1032 7D42                     l1026 7E06  
                   l1018 7DF0                     l1034 7D44                     l1050 7EEE  
                   l1042 7EDE                     l1036 7D46                     l1060 7F30  
                   l1052 7EFA                     l1044 7EE2                     l1038 7D48  
                   l1070 7F7A                     l1062 7F34                     l1046 7EE6  
                   l1080 7FA2                     l1072 7F7E                     l1064 7F50  
                   l1048 7EEA                     l1082 7FC4                     l1074 7F9A  
                   l1066 7F5C                     l1058 7F02                     l1084 7FD0  
                   l1068 7F6E                     l1086 7FD4                     l1088 7FF0  
                   _data 001D                     _main 7EDE             lcddata@value 0037  
                   fsr2h 000FDA                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000             ___param_bank 000000     __end_of_EEPROM_write 7E46  
                  ?_main 0031                    _PORTD 000F83                    _TRISD 000F95  
                  _TRISE 000F96          __end_of_lcddata 7D58                    _delay 7E46  
                  main@i 0041                    main@j 003F          __end_of_msdelay 7EDE  
                  tablat 000FF5         __end_of_SPI_init 7CDC         __end_of_SPI_read 7D20  
                  status 000FD8          EEPROM_busy@busy 0033          EEPROM_read@data 0036  
     __size_of_SPI_write 0016     __size_of_EEPROM_busy 000C     __size_of_EEPROM_read 0036  
        __initialization 7D7E             __end_of_main 8000                   ??_main 003D  
          __activetblptr 000000      EEPROM_write@address 0034    __end_of_EEPROM_status 7D08  
                 ?_delay 0037                   _ADCON1 000FC1                   _TRISA5 007C95  
                 _TRISC3 007CA3                   _TRISC4 007CA4                   _TRISC5 007CA5  
                 _SSPBUF 000FC9                   ___wmul 7D58                   _lcdcmd 7D20  
                 isa$std 000001                ??_lcddata 0037             __pdataCOMRAM 0001  
              ??_msdelay 0033                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8        __end_of_SPI_write 7CF2               __accesstop 0080  
__end_of__initialization 7D9E            ___rparam_used 000001           __pcstackCOMRAM 0031  
  __size_of_EEPROM_write 003C            __end_of_delay 7E8E                ?_SPI_init 0031  
              ?_SPI_read 0031                  ??_delay 0039             _EEPROM_write 7E0A  
                ?___wmul 0031                  ?_lcdcmd 0031               ??_SPI_init 0031  
             ??_SPI_read 0031                  _SSPCON1 000FC6                  _SSPSTAT 000FC7  
       EEPROM_write@data 0036                  __Hparam 0000                  __Lparam 0000  
        __size_of___wmul 0026                  _address 0001          __size_of_lcdcmd 001C  
                __pcinit 7D7E                  __ramtop 0600                  __ptext0 7EDE  
                __ptext1 7D3C                  __ptext2 7D20                  __ptext3 7E8E  
                __ptext4 7E46                  __ptext5 7D58                  __ptext6 7CC8  
                __ptext7 7E0A                  __ptext8 7DD4                  __ptext9 7CBC  
                _lcddata 7D3C                  _msdelay 7E8E     end_of_initialization 7D9E  
          ??_EEPROM_busy 0033            ??_EEPROM_read 0036                  postdec1 000FE5  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
              _PORTEbits 000F84                _SPI_write 7CDC            SPI_read@dummy 0031  
 __size_of_EEPROM_status 0016      __end_of_EEPROM_busy 7CC8      __end_of_EEPROM_read 7E0A  
         __end_of___wmul 7D7E            __pidataCOMRAM 7DA4           __end_of_lcdcmd 7D3C  
    start_initialization 7D7E        __size_of_SPI_init 0014        __size_of_SPI_read 0018  
             ?_SPI_write 0031                 ??___wmul 0035                 ??_lcdcmd 0037  
          _EEPROM_status 7CF2              _EEPROM_busy 7CBC              _EEPROM_read 7DD4  
          SPI_write@data 0031                 ?_lcddata 0031                 ?_msdelay 0031  
           delay@nCycles 0039           ?_EEPROM_status 0031             msdelay@itime 0031  
         __size_of_delay 0048              ??_SPI_write 0031           ___wmul@product 0035  
              main@i_179 003D        ___wmul@multiplier 0031                 _SPI_init 7CC8  
               _SPI_read 7D08                copy_data0 7D92                 __Hrparam 0000  
               __Lrparam 0000         __size_of_lcddata 001C       delay@nMilliseconds 0037  
        ??_EEPROM_status 0032         __size_of_msdelay 0050                 __ptext10 7CF2  
               __ptext11 7CDC                 __ptext12 7D08                 _commands 002B  
          ?_EEPROM_write 0034            __size_of_main 0122                 isa$xinst 000000  
         ??_EEPROM_write 0037                 msdelay@i 0033                 msdelay@j 0035  
           ?_EEPROM_busy 0031             ?_EEPROM_read 0034      EEPROM_status@status 0032  
